#
# Misc bash functions
#

function dependablast()
{
    git branch -r | awk -F/ '/\/dependabot/{print$2"/"$3"/"$4}' | xargs -I {} git push origin :{}
}


# pip bash completion start
_pip_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip
# pip bash completion end

decrypt()
{
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "USAGE: decrypt <input> <output>"
    else
        openssl des3 -d -salt -in $1 -out $2
    fi
}
encrypt()
{
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "USAGE: decrypt <input> <output>"
    else
        openssl des3 -salt -in $1 -out $2
    fi
}

function convert_to_mp3
{
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "USAGE: convert_to_mp3 <input_file> <output_file.mp3>"
    else
        ffmpeg -i $1 -acodec mp3 $2
    fi
}

function pyg()
{
    if [ -z "$1" ]; then
        echo "USAGE: pyg <input>"
    else
        echo "Running: pygmentize -f rtf $1 | pbcopy"
        pygmentize -f rtf $1 | pbcopy
    fi
}

function png2gif
{
    ## TODO: Make -r <rate> an input value.
    if [ -z "$1" ]; then
        echo "USAGE: png2gif <Filename> -- provide filename without -x.png, "
        echo "     e.g. ToastFox-1.png, ToastFox-2.png --> png2gif ToastFox "
    else
        FILE_PATTERN="$1-%d.png";
        OUTPUT="$1.gif";
        ffmpeg -f image2 -i $FILE_PATTERN -vcodec copy tmp-video.mkv && \
        ffmpeg -i tmp-video.mkv -pix_fmt rgb24 -loop 0 -r 5 $OUTPUT;
        rm tmp-video.mkv
    fi
}

function jpg2gif
{
    # TODO: Make -r <rate> an input value.
    # TODO: figure out how to control speed :-/
    if [ -z "$1" ]; then
        echo "USAGE: jpg2gif <Filename> -- provide filename without -x.jpg, "
        echo "     e.g. ToastFox-1.jpg, ToastFox-2.jpg --> jpg2gif ToastFox "
    else
        FILE_PATTERN="$1-%d.jpg";
        OUTPUT="$1.gif";
        ffmpeg -f image2 -i $FILE_PATTERN -vcodec copy tmp-video.mkv && \
        ffmpeg -i tmp-video.mkv -pix_fmt rgb24 -loop 0 -r 20 -frames 6 -vframes 6 $OUTPUT;
        rm tmp-video.mkv
    fi
}


function timerequest
{
    # Use curl to TIME http requests.
    # Inspired by this: http://stackoverflow.com/a/22625150/182778

   FMT="
         http_code:  %{http_code}
     size_download:  %{size_download}
       size_header:  %{size_header}
    speed_download:  %{speed_download}\n
   time_namelookup:  %{time_namelookup}
      time_connect:  %{time_connect}
   time_appconnect:  %{time_appconnect}
  time_pretransfer:  %{time_pretransfer}
     time_redirect:  %{time_redirect}
time_starttransfer:  %{time_starttransfer}
                   ----------
        time_total:  %{time_total}
    "
    curl -w "$FMT" -o /dev/null -s $1
}


function fnd
{
    # find but with a syntax I can remember.
    if [ -z "$1" ]; then
        echo "USAGE: fnd <pattern>"
    else
        find . -name "$1" -print
    fi
}

# http://osxdaily.com/2013/12/27/fix-there-is-no-connected-camera-error-mac/
function fixCamera {
    sudo killall AppleCameraAssistant;
    sudo killall VDCAssistant;
}


# A Function to list all the python classes in a file
function listclasses()
{
    if [ -z "$1" ]; then
        F="models.py"
    else
        F="$1"
    fi
    cat $F | grep "^class " | sed "s/class //" | sed "s/(.*$//" | sort
}
alias listmodels=listclasses | grep -v Manager

# A little function to zip up the current directory contents into a .love file.
function loveit()
{
    if [ -z "$1" ]; then
        echo "USAGE: loveit <name>"
    else
        zip -9 -q -r $1.love .
    fi
}
